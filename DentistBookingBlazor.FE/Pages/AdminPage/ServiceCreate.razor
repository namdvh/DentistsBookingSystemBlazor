@page "/serviceCreate"
@using Blazored.LocalStorage
@using DentistBooking.ViewModels.System.Services
@using DentistBookingBlazor.FE.Services.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.IdentityModel.Tokens.Jwt
@inject IToastService ToastService
@inject IServiceService serviceService;
<h3 style="text-align:center; margin:2rem 0">Service Create</h3>

<EditForm Model="service" OnValidSubmit="SubmitTask" style="max-width: 60%; margin: 0 auto">
    <DataAnnotationsValidator />

    <div class="form-group">

        <label for="Name">Name</label>
        <InputText class="form-control" @bind-Value="service.Name"></InputText>
        <ValidationMessage For="@(() => service.Name)" />
        <small id="nameHelp" class="form-text text-muted">Please enter service name here.</small>

        <label for="Procedure">Procedure</label>
        <InputText class="form-control" @bind-Value="service.Procedure"></InputText>
        <ValidationMessage For="@(() => service.Procedure)" />
        <small id="procedureHelp" class="form-text text-muted">Please enter service procedure here.</small>

        <label for="Price">Price</label>
        <InputNumber class="form-control" @bind-Value="service.Price"></InputNumber>
        <ValidationMessage For="@(() => service.Price)" />
        <small id="priceHelp" class="form-text text-muted">Please enter service price here.</small>

    </div>

    <button type="submit" class="btn btn-primary">Submit</button>

</EditForm>

@code {
    private AddServiceRequest service = new AddServiceRequest();
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }
    [Inject]
    private ILocalStorageService ILocalStorageService { get; set; }
    protected async override Task OnInitializedAsync()
    {
        var authenticationState = await authenticationStateTask;

        if (!authenticationState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/Error");
        }
        var savedToken = await ILocalStorageService.GetItemAsync<string>("authToken");
        var handler = new JwtSecurityTokenHandler();
        var jsonToken = handler.ReadToken(savedToken);
        var tokenS = jsonToken as JwtSecurityToken;
        var role = tokenS.Claims.First(claim => claim.Type == "Role").Value;
        if (!role.Equals("Admin"))
        {
            NavigationManager.NavigateTo("/Error");
        }


    }
    private async Task SubmitTask(EditContext context)
    {

        var rs = await serviceService.CreateService(service);
        if (rs)
        {
            ToastService.ShowSuccess("Create successfully", "Success");
            NavigationManager.NavigateTo("/service");
        }
        else
        {
            ToastService.ShowSuccess("Create failed", "Error");

        }
    }
}
