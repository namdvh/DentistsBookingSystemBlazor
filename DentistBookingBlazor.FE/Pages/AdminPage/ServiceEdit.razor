@page "/serviceUpdate/{ServiceId}"
@using Blazored.LocalStorage
@using DentistBooking.ViewModels.Pagination
@using DentistBooking.ViewModels.System.Discounts
@using DentistBooking.ViewModels.System.Services
@using DentistBookingBlazor.FE.Services.Services
@using DentistBookingBlazor.FE.Services.Discounts
@using Microsoft.AspNetCore.Components.Authorization
@using System.IdentityModel.Tokens.Jwt
@inject IServiceService serviceService;
@inject IToastService ToastService
@inject IDiscountService discountService;
@if (service == null)
{
    <div>Loading...</div>
}
else
{
    <h3 style="text-align:center; margin:2rem 0">Service Edit: @service.Name</h3>



    <EditForm Model="service" OnValidSubmit="SubmitTask" style="max-width: 60%; margin: 0 auto">
        <DataAnnotationsValidator />

        <div class="form-group">

            <label for="Name">Name</label>
            <InputText class="form-control" @bind-Value="service.Name"></InputText>
            <ValidationMessage For="@(() => service.Name)" />
            <small id="nameHelp" class="form-text text-muted">Please enter service name here.</small>

            <label for="Procedure">Procedure</label>
            <InputText class="form-control" @bind-Value="service.Procedure"></InputText>
            <ValidationMessage For="@(() => service.Procedure)" />
            <small id="procedureHelp" class="form-text text-muted">Please enter service procedure here.</small>

            <label for="Price">Price</label>
            <InputNumber class="form-control" @bind-Value="service.Price"></InputNumber>
            <ValidationMessage For="@(() => service.Price)" />
            <small id="priceHelp" class="form-text text-muted">Please enter service price here.</small>

            <div class="form-group">
                <label for="Discount">Discount</label>
                <InputSelect class="form-control" @bind-Value="service.DiscountId">
                    <option>Select a discount</option>
                    @foreach (var item in discounts)
                    {
                    <option value="@item.Id">@item.Title</option>
                    }
            </InputSelect>
            <small id="discountHelp" class="form-text text-muted">Choose a discount which you want.</small>
        </div>

    </div>

    <button type="submit" class="btn btn-primary">Submit</button>

</EditForm>
}

@code {
    [Parameter]
    public string ServiceId { get; set; }

    private ServiceRequest service;

    private ListDiscountResponse listDiscountResponse;

    public List<DiscountDTO> discounts = new();
    PaginationFilter paginationFilter = new();
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }
    [Inject]
    private ILocalStorageService ILocalStorageService { get; set; }
    protected async override Task OnInitializedAsync()
    {
        var authenticationState = await authenticationStateTask;

        if (!authenticationState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/Error");
        }
        var savedToken = await ILocalStorageService.GetItemAsync<string>("authToken");
        var handler = new JwtSecurityTokenHandler();
        var jsonToken = handler.ReadToken(savedToken);
        var tokenS = jsonToken as JwtSecurityToken;
        var role = tokenS.Claims.First(claim => claim.Type == "Role").Value;
        if (!role.Equals("Admin"))
        {
            NavigationManager.NavigateTo("/Error");
        }
        var serviceDto = await serviceService.GetService(Int32.Parse(ServiceId));
        service = new ServiceRequest();
        service.Id = Int32.Parse(ServiceId);
        service.Name = serviceDto.ServiceName;
        service.Procedure = serviceDto.Procedure;
        service.Price = serviceDto.Price;
        service.DiscountId = serviceDto.DiscountId;
        await GetDiscounts();
    }

    private async Task GetDiscounts()
    {
        listDiscountResponse = await discountService.GetDiscountList(paginationFilter);
        discounts = listDiscountResponse.Content as List<DiscountDTO>;
    }

    private async void SubmitTask(EditContext context)
    {
        var rs = await serviceService.UpdateService(service);
        if (rs)
        {
            ToastService.ShowSuccess("Edit successfully", "Success");

            NavigationManager.NavigateTo("/service");
        }
        else
        {
            ToastService.ShowError("Edit failed", "Failed");

        }
    }
}
